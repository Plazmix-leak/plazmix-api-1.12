package net.plazmix.game.item.parameter;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import net.plazmix.game.GamePlugin;
import net.plazmix.game.item.GameItem;
import net.plazmix.game.item.GameItemParameter;
import net.plazmix.game.item.GameItemPrice;
import net.plazmix.game.item.GameItemsCategory;
import net.plazmix.game.item.menu.GameItemsAutoGeneratedMenu;
import net.plazmix.game.mysql.GameMysqlDatabase;
import net.plazmix.game.mysql.WhereQuery;
import net.plazmix.game.mysql.type.UpgradeGameItemsMysqlDatabase;
import net.plazmix.game.user.GameUser;
import net.plazmix.utility.ItemUtil;
import org.bukkit.ChatColor;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.inventory.ItemStack;

import java.util.LinkedList;
import java.util.List;

@Getter
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PROTECTED, makeFinal = true)
public class UpgradeGameItemParameter implements GameItemParameter {

    @Getter
    @RequiredArgsConstructor
    @FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
    public static class Upgrade {

        @NonNull
        int level, value;

        @NonNull
        GameItemPrice price;


        @Override
        public String toString() {
            return ChatColor.GREEN + (value + "%") + " §f- " + price.formattingDisplay();
        }
    }


    @NonNull
    GameItem item;

    @NonNull
    LinkedList<Upgrade> upgradeList = new LinkedList<>();


    @Override
    public GameMysqlDatabase getDatabase() {
        GameMysqlDatabase database = GameUser.getService().getGameDatabase(UpgradeGameItemsMysqlDatabase.class);

        if (database == null) {
            GameUser.getService().addGameDatabase(database = new UpgradeGameItemsMysqlDatabase(
                    GameUser.getService().getGameName()
            ));
        }

        return database;
    }

    @Override
    public ItemStack toBukkitItem(@NonNull GameUser gameUser, @NonNull GameItemsCategory categoryFor) {
        ItemUtil.ItemBuilder itemBuilder = ItemUtil.newBuilder(item.getIconItem());
        itemBuilder.addLore("");

        if (item.getDescription() != null) {
            itemBuilder.addLoreArray(item.getDescription().toArray(new String[0]));

            itemBuilder.addLore("");
        }

        // Upgrades list.
        itemBuilder.addLore("§7Список возможных улучшений:");

        int upgradeCounter = 1;
        for (Upgrade upgrade : upgradeList) {

            itemBuilder.addLore((getPlayerUpgrade(gameUser) != null && getPlayerUpgrade(gameUser).getLevel() == upgradeCounter ? "§e" : "§8")
                    + " " + upgradeCounter + ". " + upgrade);

            upgradeCounter++;
        }

        itemBuilder.addLore("");

        // Add item display.
        ChatColor displayColor;

        if (item.getPrice().getCurrency().has(item.getPrice().getCount(), gameUser)) {
            displayColor = ChatColor.YELLOW;

            if (getPlayerUpgrade(gameUser) != null && getPlayerUpgrade(gameUser).getLevel() < getMaxLevel()) {
                itemBuilder.addLore("§7Стоимость улучшения: §f" + item.getPrice().formattingDisplay());
                itemBuilder.addLore("");
            }

            itemBuilder.addLore("§a▸ Нажмите ПКМ, чтобы улучшить!");

        } else {
            displayColor = ChatColor.RED;

            itemBuilder.addLore("§c▸ Вы достигли МАКСИМАЛЬНОГО уровня!");
        }

        if (gameUser.hasItem(item)) {

            if (gameUser.isItemSelected(item)) {
                displayColor = ChatColor.GOLD;

                itemBuilder.setGlowing(true);
                itemBuilder.addLore("§6▸ Данный предмет уже выбран!");

            } else {

                displayColor = ChatColor.GREEN;

                itemBuilder.addLore("§a▸ Нажмите ЛКМ, чтобы выбрать!");
            }
        }

        itemBuilder.setName(displayColor + item.getItemName());
        return itemBuilder.build();
    }

    @Override
    public void onGeneratedInventoryAction(@NonNull GameUser gameUser, @NonNull GameItemsAutoGeneratedMenu menu, @NonNull InventoryClickEvent event,  @NonNull GameItemsCategory categoryFor) {
        String prefix = GameUser.getService().getGameName();
        Player player = gameUser.getBukkitHandle();

        // TODO: Установить цену покупки исходя из цены улучшения для указанного GameUser

        if (getPlayerUpgrade(gameUser) != null && getPlayerUpgrade(gameUser).getLevel() >= getMaxLevel()) {
            player.sendMessage("§cОшибка, Вы достигли максимального уровня!");
            return;
        }

        if (!item.getPrice().getCurrency().has(item.getPrice().getCount(), gameUser) && !gameUser.hasItem(item)) {
            player.sendMessage("§cОшибка, у Вас недостаточно средств!");
            return;
        }

        switch (event.getClick()) {

            case LEFT: {
                if (gameUser.hasItem(item)) {

                    if (!gameUser.isItemSelected(item)) {
                        player.playSound(player.getLocation(), Sound.ENTITY_ITEM_PICKUP, 1, 1);

                        gameUser.setSelectedItem(item);

                        onDefaultSelect(gameUser);
                        item.onSelect(gameUser);

                    } else {

                        player.playSound(player.getLocation(), Sound.ENTITY_ITEM_BREAK, 1, 1);

                        gameUser.unselectItem(item);
                    }
                }

                break;
            }

            case RIGHT: {
                if (!gameUser.hasItem(item)) {
                    player.sendMessage("§d§l" + prefix + " §8:: §fВы приобрели §a" + item.getItemName() + " §fза " + item.getPrice().formattingDisplay());

                    item.getPrice().getCurrency().take(item.getPrice().getCount(), gameUser);
                    gameUser.addItem(item);

                    menu.updateInventory(player);
                    break;
                }

                player.sendMessage("§d§l" + prefix + " §8:: §fВы улучшили §a" + item.getItemName() + " §fза " + item.getPrice().formattingDisplay());

                incrementPlayerUpgrade(gameUser);
                break;
            }
        }

        menu.updateInventory(player);
    }

    @Override
    public void onDefaultApply(@NonNull GameUser gameUser) {
    }

    @Override
    public void onDefaultCancel(@NonNull GameUser gameUser) {
    }

    @Override
    public void onDefaultSelect(@NonNull GameUser gameUser) {
        // Current item.
        getDatabase().update(true, gameUser, "State", true,

                new WhereQuery("CategoryID", item.getItemCategory().getId()),
                new WhereQuery("ItemID", item.getId()));

        // Player cache.
        List<GameItem> selectedItems = gameUser.getSelectedItems(item.getItemCategory().getId());
        selectedItems.add(item);

        gameUser.getCache().set("SItems" + item.getItemCategory().getId(), selectedItems);
    }

    @Override
    public void onDefaultUnselect(@NonNull GameUser gameUser) {
        getDatabase().update(true, gameUser, "State", false,

                new WhereQuery("CategoryID", item.getItemCategory().getId()),
                new WhereQuery("ItemID", item.getId()));

        // Player cache
        List<GameItem> selectedItems = gameUser.getSelectedItems(item.getItemCategory());
        selectedItems.remove(item);

        gameUser.getCache().set("SItems" + item.getItemCategory().getId(), selectedItems);
    }

    @Override
    public void onDefaultPurchased(@NonNull GameUser gameUser) {
        int currentLevel = gameUser.getCache().getInt("UItemsUpgrade" + item.getItemCategory().getId() + item.getId());

        getDatabase().insert(true, gameUser, item.getItemCategory().getId(), item.getId(), currentLevel, false);
    }

    public void addUpgrade(@NonNull Upgrade upgrade) {
        upgradeList.add(upgrade);
    }

    public int getMinLevel() {
        return upgradeList.getFirst().getLevel();
    }

    public int getMaxLevel() {
        return upgradeList.getLast().getLevel();
    }


    public void incrementPlayerUpgrade(@NonNull GameUser gameUser) {
        gameUser.getCache().increment("UItemsUpgrade" + item.getItemCategory().getId() + item.getId());
    }

    public void setPlayerUpgrade(@NonNull GameUser gameUser, int level) {
        gameUser.getCache().set("UItemsUpgrade" + item.getItemCategory().getId() + item.getId(), level);
    }

    public Upgrade getPlayerUpgrade(@NonNull GameUser gameUser) {
        int currentLevel = gameUser.getCache().getInt("UItemsUpgrade" + item.getItemCategory().getId() + item.getId());

        for (Upgrade upgrade : upgradeList) {
            if (upgrade.level == currentLevel) {
                return upgrade;
            }
        }

        return null;
    }

}
